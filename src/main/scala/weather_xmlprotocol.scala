// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package eu.getintheloop.sample
    
/**
usage:
val obj = scalaxb.fromXML[eu.getintheloop.sample.Foo](node)
val document = scalaxb.toXML[eu.getintheloop.sample.Foo](obj, "foo", eu.getintheloop.sample.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://litwinconsulting.com/webservices/",
    Some("tns") -> "http://litwinconsulting.com/webservices/",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema")
  implicit lazy val SampleGetWeatherFormat: scalaxb.XMLFormat[eu.getintheloop.sample.GetWeather] = new DefaultSampleGetWeatherFormat {}
  implicit lazy val SampleGetWeatherResponseFormat: scalaxb.XMLFormat[eu.getintheloop.sample.GetWeatherResponse] = new DefaultSampleGetWeatherResponseFormat {}

  trait DefaultSampleGetWeatherFormat extends scalaxb.ElemNameParser[eu.getintheloop.sample.GetWeather] {
    val targetNamespace: Option[String] = Some("http://litwinconsulting.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eu.getintheloop.sample.GetWeather] =
      opt(scalaxb.ElemName(targetNamespace, "City")) ^^
      { case p1 =>
      eu.getintheloop.sample.GetWeather(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: eu.getintheloop.sample.GetWeather, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.City map { scalaxb.toXML[String](_, targetNamespace, Some("City"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSampleGetWeatherResponseFormat extends scalaxb.ElemNameParser[eu.getintheloop.sample.GetWeatherResponse] {
    val targetNamespace: Option[String] = Some("http://litwinconsulting.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eu.getintheloop.sample.GetWeatherResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetWeatherResult")) ^^
      { case p1 =>
      eu.getintheloop.sample.GetWeatherResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: eu.getintheloop.sample.GetWeatherResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetWeatherResult map { scalaxb.toXML[String](_, targetNamespace, Some("GetWeatherResult"), __scope, false) } getOrElse {Nil})

  }


  trait WeatherSoap12Bindings { this: scalaxb.SoapClients =>
    lazy val targetNamespace: Option[String] = Some("http://litwinconsulting.com/webservices/")
    lazy val service: WeatherSoap = new WeatherSoap12Binding {}
    lazy val baseAddress = new java.net.URI("http://www.deeptraining.com/webservices/weather.asmx")

    trait WeatherSoap12Binding extends WeatherSoap {
      def getWeather(city: Option[String]): Either[scalaxb.Fault[Any], Option[String]] = 
        soapClient.requestResponse(scalaxb.toXML(GetWeather(city), targetNamespace, "GetWeather", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("http://litwinconsulting.com/webservices/GetWeather"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetWeatherResponse](x).GetWeatherResult)
        }
    }
  }



}

